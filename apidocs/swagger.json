{
  "info": {
    "version": "Build ede7619a82a790498f4ecca11a28bdfd547e64b8",
    "contact": {
      "url": "http://www.vmware.com/company/contact_sales.html"
    },
    "description": "VMware Identity Manager REST API documentation.",
    "license": {
      "url": "http://www.vmware.com/download/eula/identity-manager-terms-of-service.html",
      "name": "VMware Identity Manager Terms of Service"
    },
    "title": "VMware Identity Manager"
  },
  "paths": {
    "/SAAS/jersey/manager/api/scim/Users": {
      "post": {
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SdkUserResource"
            }
          },
          "500": {
            "description": "An unexpected error occurred"
          },
          "409": {
            "description": "A user with the same userName already exists"
          },
          "400": {
            "description": "The specified attributes are invalid or the userName of the user to be created is missing or invalid"
          }
        },
        "description": "Creates a user in the system directory",
        "parameters": [
          {
            "description": "list of attributes to return, separated by comma. When specified, the returned created user will only contain the minimal set of user attributes plus the attributes or sub-attributes explicitly requested",
            "required": false,
            "x-example": "urn:scim:schemas:extension:workspace:1.0:internalUserType,externalId",
            "in": "query",
            "type": "string",
            "name": "attributes"
          },
          {
            "description": "whether or not to send email to set the password. This parameter is used only if the password is not set in the JSON body. If set to 'false', the returned user resource will contain an OTA link to set the password. The default is 'true'",
            "default": true,
            "required": false,
            "x-example": "false",
            "in": "query",
            "type": "boolean",
            "name": "sendMail"
          },
          {
            "description": "the user resource to be created as a JSON string",
            "required": true,
            "x-examples": {
              "default": "{\n    \"schemas\": [\n        \"urn:scim:schemas:core:1.0\"\n        ],\n    \"userName\": \"test-user-10\",\n    \"name\": {\n        \"givenName\": \"firstName 10\",\n        \"familyName\": \"lastName 10\"\n    },\n    \"emails\": [\n        {\n            \"value\": \"test10@vmware.com\"\n        }\n    ],\n    \"password\": \"123456\"\n }"
            },
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/SdkUserResource"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "scim",
          "admin"
        ],
        "summary": "Create a local user",
        "security": [
          {
            "oauth2": [
              "admin"
            ]
          }
        ],
        "operationId": "post-postUser"
      },
      "get": {
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResourcesOfUserResource"
            }
          },
          "404": {
            "description": "If the query parameter values are invalid for \"sortBy\", \"count\" or \"startIndex\""
          },
          "400": {
            "description": "The specified filter operation is invalid or the specified \"attributes\" are invalid"
          }
        },
        "description": "Retrieve all users if no filter is specified, otherwise retrieve all the users matching the given filter.\nThis endpoint complies with the SCIM specifications; see https://tools.ietf.org/html/rfc7644#page-15",
        "parameters": [
          {
            "description": "list of attributes to return, separated by comma. When specified, the retrieved user(s) will only contain the minimal set of user attributes plus the attributes or sub-attributes explicitly requested",
            "required": false,
            "x-example": "userName,groups",
            "in": "query",
            "type": "string",
            "name": "attributes"
          },
          {
            "description": "when specified, only users matching the filter expression will be returned. The filter must comply with the SCIM specification. Only 'eq','co','sw','gt','ge','lt' and 'le' are currently supported as operators",
            "required": false,
            "x-example": "userName co \"j\"",
            "in": "query",
            "type": "string",
            "name": "filter"
          },
          {
            "description": "offset of the first user to return in the list of found users. This is used for pagination",
            "format": "int32",
            "default": 0,
            "required": false,
            "x-example": 10,
            "in": "query",
            "type": "integer",
            "name": "startIndex"
          },
          {
            "description": "the number of found users to return starting from the given startIndex. This is used for pagination",
            "format": "int32",
            "default": 20,
            "required": false,
            "x-example": 50,
            "in": "query",
            "type": "integer",
            "name": "count"
          },
          {
            "description": "the attribute to use to sort the found user",
            "required": false,
            "x-example": "userName",
            "in": "query",
            "type": "string",
            "name": "sortBy"
          },
          {
            "enum": [
              "ascending",
              "descending"
            ],
            "description": "the direction the resources returned should be sorted in. Allowed values are \"ascending\" and \"descending\".",
            "required": false,
            "x-example": "descending",
            "in": "query",
            "type": "string",
            "name": "sortOrder"
          },
          {
            "description": "custom schema extension types for which user schema attributes need to be included",
            "required": false,
            "x-example": "myCustomSchema",
            "in": "query",
            "type": "string",
            "name": "customSchemaExtensionTypes"
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "scim",
          "admin"
        ],
        "summary": "Find all users or only users matching a supplied filter",
        "security": [
          {
            "oauth2": [
              "admin"
            ]
          }
        ],
        "operationId": "get-getUsers"
      }
    },
    "/SAAS/jersey/manager/api/scim/Users/.search": {
      "post": {
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResourcesOfUserResource"
            }
          },
          "400": {
            "description": "The specified search request is invalid"
          }
        },
        "description": "Retrieve all users if no filter is specified, otherwise retrieve all the users matching the given filter.\nThis endpoint complies with the SCIM specifications, see https://tools.ietf.org/html/rfc7644#page-15.\nIt serves the same function as the GET /scim/Users API but using a POST to allow an unlimited request size.",
        "parameters": [
          {
            "description": "the search request",
            "required": true,
            "x-examples": {
              "default": "{\n\t\"filter\" : \"name.givenName sw \\\"jo\\\"\",\n\t\"attributes\" : \"userName,name.familyName,emails\",\n\t\"sortBy\" : \"name.familyName\"\n}"
            },
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/SearchRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "scim",
          "admin"
        ],
        "summary": "Find all users or only users matching a supplied filter",
        "security": [
          {
            "oauth2": [
              "admin"
            ]
          }
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "post-findUsers"
      }
    },
    "/SAAS/API/1.0/REST/oauth2/activate": {
      "post": {
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/OAuth2ClientActivationDetails"
            }
          },
          "404": {
            "description": "Activation failed, organization not found."
          },
          "500": {
            "description": "Activation failed, unknown error."
          },
          "400": {
            "description": "Activation failed, activation code is invalid or not specified."
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "description": "the activation code",
            "required": true,
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "mobile",
          "oauth2"
        ],
        "description": "This endpoint is used in the dynamic mobile registration flow. The activation code is obtained by calling the /SAAS/auth/device/register endpoint. The client_secret and client_id returned in this call will be used in the call to the /SAAS/auth/oauthtoken endpoint.",
        "summary": "Activate the device client by exchanging an activation code for a client ID and client secret.",
        "operationId": "post-activateOauth2Client"
      }
    },
    "/SAAS/auth/.well-known/openid-configuration": {
      "get": {
        "operationId": "get-getOpenIDConfiguration",
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/OpenIDConfiguration"
            }
          }
        },
        "summary": "OpenID Connect discovery endpoint",
        "description": "This endpoint follows the specification defined at http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata. It provides a mechanism for an OpenID Connect Relying Party to discover the End-User's OpenID Provider and obtain information needed to interact with it, including its OAuth 2.0 endpoint locations.",
        "tags": [
          "oauth2",
          "oidc"
        ]
      }
    },
    "/SAAS/jersey/manager/api/oauth2clients": {
      "post": {
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/OAuth2ClientTypeInfo"
            }
          },
          "500": {
            "description": "If an unexpected error occurred or if client id already exists"
          },
          "400": {
            "description": "Invalid provided OAuth2 client information. Could be unpermitted characters in client id, invalid scope string, redirect uri missing or not in a url format in an authorization_code grant client, invalid grant type etc."
          }
        },
        "description": "This endpoint is used to define a new OAuth2 Client on VMware Identity Manager. An OAuth2 Client can be a Service Client('client credentials' OAuth2 grant type), or a User Client('authorization_code' or 'password' OAuth2 grant types). This definition will enable a service or its users to authenticate to VMware Identity Manager using the OAuth2 protocol.",
        "produces": [
          "application/vnd.vmware.horizon.manager.oauth2client+json"
        ],
        "tags": [
          "admin",
          "oauth2"
        ],
        "summary": "Create a new OAuth 2.0 client",
        "security": [
          {
            "oauth2": [
              "admin"
            ]
          }
        ],
        "consumes": [
          "application/vnd.vmware.horizon.manager.oauth2client+json"
        ],
        "operationId": "post-createGenericOAuth2Client"
      },
      "get": {
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/OAuth2ClientSummaryList"
            }
          }
        },
        "produces": [
          "application/vnd.vmware.horizon.manager.oauth2clientsummarylist+json"
        ],
        "description": "This endpoint is used to read the list of OAuth 2.0 clients VMware Identity Manager has registered.",
        "tags": [
          "admin",
          "oauth2"
        ],
        "summary": "List existing OAuth 2.0 clients",
        "security": [
          {
            "oauth2": [
              "admin"
            ]
          }
        ],
        "operationId": "get-getOAuth2ClientSummaryList"
      }
    },
    "/SAAS/jersey/manager/api/scim/Roles/{id}": {
      "patch": {
        "responses": {
          "404": {
            "description": "If role or role member id is not found"
          },
          "403": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error while patching SCIM role"
          },
          "401": {
            "description": "No authentication provided"
          },
          "400": {
            "description": "If the supplied serialized JSON role is malformed"
          }
        },
        "description": "Updates role's information. Commonly used to assign users to this role. The role id is a unique internal identifier and can be retrieved using the search API /scim/Roles?filter=...\nPatch operation allows to send in the request the attributes that need to be changed only.",
        "parameters": [
          {
            "description": "the id of the role to update",
            "required": true,
            "x-example": "a1ac2b75-6c41-45e9-8349-59746c529ccb",
            "in": "path",
            "type": "string",
            "name": "id"
          },
          {
            "description": "the role resource to be updated as a JSON string",
            "required": true,
            "x-examples": {
              "default": "{\n    \"schemas\": [\n        \"urn:scim:schemas:core:1.0\"\n        ],\n    \"members\": \n        {\n            \"value\": \"8142e325-18b0-4fc3-af52-3f650f7dacf8\"\n            \"type\" : \"User\"        }\n }"
            },
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/SdkRoleResource"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "scim",
          "admin"
        ],
        "summary": "Update a role found by id",
        "security": [
          {
            "oauth2": [
              "admin"
            ]
          }
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "patch-patchRole"
      },
      "get": {
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SdkRoleResource"
            }
          },
          "404": {
            "description": "If role id is not found"
          },
          "500": {
            "description": "An unexpected error occurred"
          },
          "400": {
            "description": "One or more of the specified \"attributes\" parameter values is invalid"
          }
        },
        "description": "Get additional role information using the role unique identifier (id). The role id can be retrieved using the search API /scim/Roles?filter=...",
        "parameters": [
          {
            "description": "the id of the role to retrieve",
            "required": true,
            "x-example": "a1ac2b75-6c41-45e9-8349-59746c529ccb",
            "in": "path",
            "type": "string",
            "name": "id"
          },
          {
            "description": "list of attributes to return, separated by comma. When specified, the retrieved role will only contain the minimal set of role attributes plus the attributes or sub-attributes explicitly requested, i.e. {urn}:{Attribute name}.{Sub-Attribute name}",
            "required": false,
            "x-example": "displayName,meta.version,urn:scim:schemas:extension:workspace:1.0:description,",
            "in": "query",
            "type": "string",
            "name": "attributes"
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "scim",
          "admin"
        ],
        "summary": "Get a role by id",
        "security": [
          {
            "oauth2": [
              "admin"
            ]
          }
        ],
        "operationId": "get-getRole"
      }
    },
    "/SAAS/jersey/manager/api/scim/Users/{id}": {
      "patch": {
        "responses": {
          "404": {
            "description": "The specified user does not exist."
          },
          "403": {
            "description": "The user is not a local user and can not be updated"
          },
          "500": {
            "description": "An unexpected error occurred"
          },
          "400": {
            "description": "The supplied JSON is incorrect"
          }
        },
        "description": "Updates user's information. The user id is a unique internal identifier and can be retrieved using the search API /scim/Users?filter=...\nPatch operation allows to send in the request only attributes that need to be changed.",
        "parameters": [
          {
            "description": "the id of the user to update",
            "required": true,
            "x-example": "d24afa39-05a1-433f-8aa9-ad41c9a3d394",
            "in": "path",
            "type": "string",
            "name": "id"
          },
          {
            "description": "the user resource updated information as a JSON string",
            "required": true,
            "x-examples": {
              "default": "{ \"name\": { \"givenName\": \"Updated given name\" }}"
            },
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/SdkUserResource"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "scim",
          "admin"
        ],
        "summary": "Update a user found by id",
        "security": [
          {
            "oauth2": [
              "admin"
            ]
          }
        ],
        "operationId": "patch-patchUser"
      },
      "delete": {
        "responses": {
          "404": {
            "description": "The specified user does not exist"
          },
          "500": {
            "description": "An unexpected error occurred"
          }
        },
        "description": "The user id is a unique internal identifier and can be retrieved using the search API /scim/Users?filter=...",
        "parameters": [
          {
            "description": "the id of the user to delete",
            "required": true,
            "x-example": "d24afa39-05a1-433f-8aa9-ad41c9a3d394",
            "in": "path",
            "type": "string",
            "name": "id"
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "scim",
          "admin"
        ],
        "summary": "Delete a user found by id",
        "security": [
          {
            "oauth2": [
              "admin"
            ]
          }
        ],
        "operationId": "delete-deleteUser"
      },
      "get": {
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SdkUserResource"
            }
          }
        },
        "description": "The user id is a unique internal identifier and can be retrieved using the search API /scim/Users?filter=...",
        "parameters": [
          {
            "description": "the id of the user to retrieve",
            "required": true,
            "x-example": "d24afa39-05a1-433f-8aa9-ad41c9a3d394",
            "in": "path",
            "type": "string",
            "name": "id"
          },
          {
            "description": "when specified, the returned user will contain the minimal set of user attributes plus the attributes or sub-attributes explicitly requested",
            "required": false,
            "type": "string",
            "name": "attributes",
            "in": "query"
          },
          {
            "description": "the directory identifier. This identifier will be used to retrieve local directory's user attribute definitions (if any). If not specified, the user attribute definitions defined for the tenant will be used.",
            "required": false,
            "x-example": "ca6c160e-5bb9-422c-8d71-777a90241dea",
            "in": "query",
            "type": "string",
            "name": "directoryUuid"
          },
          {
            "description": "custom schema extension types for which user schema attributes needs to be included",
            "required": false,
            "x-example": "my-custom-schema",
            "in": "query",
            "type": "string",
            "name": "customSchemaExtensionTypes"
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "scim",
          "admin"
        ],
        "summary": "Get a user by id",
        "security": [
          {
            "oauth2": [
              "admin"
            ]
          }
        ],
        "operationId": "get-getUser"
      }
    },
    "/SAAS/auth/oauth2/authorize": {
      "get": {
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "The error can be any of those: no client_id has been specified, the client_id does not exist, the redirect_uri has not been specified or does not match. The error message will contain 'error' and 'error_description' fields. See the OAuth2.0 spec for further details."
          }
        },
        "parameters": [
          {
            "description": "Specifies the callback endpoint in your application that will receive the authorization code. It must match the redirect_uri defined in your OAuth2.0 client registration in VMware Identity Manager. When sending the redirect_uri as a URL parameter it has to be URL encoded.",
            "required": true,
            "x-example": "https://example-app.com/redirect?auth%3Doauth",
            "in": "query",
            "type": "string",
            "name": "redirect_uri"
          },
          {
            "description": "This is the identifier of the OAuth 2.0 client that was registered in VMware Identity Manager.",
            "required": true,
            "x-example": "Example_AppID",
            "in": "query",
            "type": "string",
            "name": "client_id"
          },
          {
            "description": "Specifies how the application should receive the authorization response. Only 'code' is supported.",
            "required": true,
            "x-example": "code",
            "in": "query",
            "type": "string",
            "name": "response_type"
          },
          {
            "description": "A random string that your application generates and that will be sent back as a parameter during the URI redirection.",
            "required": false,
            "x-example": "5aPY-C1JSeyTiUPWV_DLDw",
            "in": "query",
            "type": "string",
            "name": "state"
          },
          {
            "description": "The list of scopes of the authorization request separated by a space and is URL encoded. The scopes must be equivalent or a subset of the scopes defined in the OAuth2.0 client.",
            "required": false,
            "x-example": "openid+profile+email+user",
            "in": "query",
            "type": "string",
            "name": "scope"
          },
          {
            "description": "Specifies the user's domain. If this parameter is specified, the login screen will skip the domain selection page. This can be used when it is known that a single domain is used or the domain information can be inferred automatically (from the username for example).This is a VMware Identity Manager optional parameter and is not in the OAuth 2.0 specification. ",
            "required": false,
            "type": "string",
            "name": "domain",
            "in": "query"
          },
          {
            "description": "Specifies the user's login. In case your application already knows what user is going to login, and VMware Identity Manager will have to pass this user to a third-party IdP, then adding this parameter will send the username as part of the SAML request. This is a VMware Identity Manager optional parameter and is not in the OAuth 2.0 specification.",
            "required": false,
            "type": "string",
            "name": "u",
            "in": "query"
          }
        ],
        "tags": [
          "oauth2",
          "login"
        ],
        "description": "This is the starting point of the OAuth 2.0 flow to authenticate end users from your application.This authorization endpoint complies with the OAuth 2.0 specifications and must be used by clients to authenticate users and obtain an authorization code. To use this endpoint, your application must be registered as an OAuth 2.0 client in VMware Identity Manager and have the 'authorization_code' grant type enabled.",
        "summary": "OAuth 2.0 authorization endpoint",
        "operationId": "get-doOAuth2Authorize"
      }
    },
    "/SAAS/auth/oauthtoken": {
      "post": {
        "responses": {
          "200": {
            "description": "Successful",
            "schema": {
              "$ref": "#/definitions/OAuth2Token"
            }
          },
          "405": {
            "description": "The HTTP method might be incorrect, make sure you use the POST method."
          },
          "500": {
            "description": "The grant_type is incorrect or absent."
          },
          "401": {
            "description": "The client authentication failed. Check the 'Authorization' header."
          },
          "400": {
            "description": "The error can be any of those: the provided grant type is not supported, the request is missing a required parameter, the client authentication failed, the provided authorization grant is invalid, the authenticated client is not authorized to use this authorization grant type. The error message will contain 'error' and 'error_description' fields. See the OAuth2.0 spec for further details."
          }
        },
        "parameters": [
          {
            "description": "Specifies the OAuth grant type the client is making. VMware Identity Manager supports the following grant types from the OAuth specifications: authorization_code, password, client_credentials, and refresh_token. VMware Identity Manager also supports the grant type urn:ietf:params:oauth:grant-type:jwt-bearer for using JWTs for authorization as described in the JWT Bearer Token Profiles for OAuth 2.0 specifications.",
            "required": true,
            "type": "string",
            "name": "grant_type",
            "in": "query"
          },
          {
            "description": "The client identifier. If the HTTP Basic authentication scheme is not used, client must specify the client identifier using this request parameter. The use of HTTP Basic is recommended.\n",
            "required": false,
            "x-example": "Example_AppID",
            "in": "query",
            "type": "string",
            "name": "client_id"
          },
          {
            "description": "The username, UTF-8 encoded. Required only if the grant_type is 'password'",
            "required": false,
            "type": "string",
            "name": "username",
            "in": "query"
          },
          {
            "description": "The password, UTF-8 encoded. Required only if the grant_type is 'password'",
            "required": false,
            "type": "string",
            "name": "password",
            "in": "query"
          },
          {
            "description": "The domain the user belongs to. Optional and only used if the grant_type is 'password'",
            "required": false,
            "type": "string",
            "name": "domain",
            "in": "query"
          },
          {
            "description": "The list of scopes of the access request. Required only if the grant_type is 'password'",
            "required": false,
            "type": "string",
            "name": "scope",
            "in": "query"
          },
          {
            "description": "The authorization code received from the authorize request. Required only if the grant_type is 'authorization_code'",
            "required": false,
            "type": "string",
            "name": "code",
            "in": "query"
          },
          {
            "description": "The redirect_uri as provided to the authorize request. Required only if the grant_type is 'authorization_code'",
            "required": false,
            "type": "string",
            "name": "redirect_uri",
            "in": "query"
          }
        ],
        "tags": [
          "oauth2",
          "login"
        ],
        "description": "This token endpoint complies with the OAuth 2.0 specifications and must be used by client to obtain an access token with client authentication.",
        "summary": "Obtain an OAuth 2.0 access token and optionally a refresh token",
        "security": [
          {
            "basic_auth": []
          }
        ],
        "operationId": "post-handleRequest"
      }
    },
    "/SAAS/jersey/manager/api/scim/Groups/{id}": {
      "patch": {
        "responses": {
          "500": {
            "description": "An unexpected error occurred"
          },
          "400": {
            "description": "The supplied JSON is incorrect"
          }
        },
        "description": "Updates group's information. The group id is a unique internal identifier and can be retrieved using the search API /scim/Groups?filter=...\nPatch operation allows to send in the request only attributes that need to be changed.",
        "parameters": [
          {
            "description": "the id of the group to update",
            "required": true,
            "x-example": "d24afa39-05a1-433f-8aa9-ad41c9a3d394",
            "in": "path",
            "type": "string",
            "name": "id"
          },
          {
            "description": "the group resource updated information as a JSON string",
            "required": true,
            "x-examples": {
              "default": "{\n\t\"displayName\": \"updated-test-group\"\n}"
            },
            "name": "body",
            "in": "body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "scim",
          "admin"
        ],
        "summary": "Update a group found by id",
        "security": [
          {
            "oauth2": [
              "admin"
            ]
          }
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "patch-patchGroup"
      },
      "delete": {
        "responses": {
          "404": {
            "description": "The specified group does not exist."
          },
          "500": {
            "description": "An unexpected error occurred."
          }
        },
        "description": "The group id is a unique internal identifier and can be retrieved using the search API /scim/Groups?filter=...",
        "parameters": [
          {
            "description": "the id of the group to delete",
            "required": true,
            "x-example": "d24afa39-05a1-433f-8aa9-ad41c9a3d394",
            "in": "path",
            "type": "string",
            "name": "id"
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "scim",
          "admin"
        ],
        "summary": "Delete a group found by id",
        "security": [
          {
            "oauth2": [
              "admin"
            ]
          }
        ],
        "operationId": "delete-deleteGroup"
      },
      "get": {
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SdkGroupResource"
            }
          }
        },
        "description": "The group id is a unique internal identifier and can be retrieved using the search API /scim/Groups?filter=...",
        "parameters": [
          {
            "description": "the id of the group to retrieve",
            "required": true,
            "x-example": "a1ac2b75-6c41-45e9-8349-59746c529ccb",
            "in": "path",
            "type": "string",
            "name": "id"
          },
          {
            "description": "when specified, the returned group will contain the minimal set of user attributes plus the attributes or sub-attributes explicitly requested",
            "required": false,
            "x-example": "displayName",
            "in": "query",
            "type": "string",
            "name": "attributes"
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "scim",
          "admin"
        ],
        "summary": "Get a group by id",
        "security": [
          {
            "oauth2": [
              "admin"
            ]
          }
        ],
        "operationId": "get-getGroup"
      }
    },
    "/SAAS/API/1.0/REST/auth/token": {
      "get": {
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "enum": [
              "isValid",
              "isRevoked",
              "publicKey"
            ],
            "description": "the type of operation to perform on the token. Use \"isValid\" to validate a token, \"isRevoked\" to check the revocation status, and \"publicKey\" to retrieve the public key",
            "required": true,
            "in": "query",
            "type": "string",
            "name": "attribute"
          },
          {
            "description": "the tenant to retrieve the public key for (only valid when attribute is publicKey), if the tenant is different from the one in the request URL",
            "required": false,
            "type": "string",
            "name": "tenant",
            "in": "query"
          },
          {
            "enum": [
              "pem",
              "jwks",
              "jwk"
            ],
            "description": "the format of the public key (only valid when attribute is publicKey). Use \"pem\" to retrieve the key in PEM format, \"jwks\" to get the key in JWKS format, and \"jwk\" to get in the key in the JWK format (early draft)",
            "default": "jwk",
            "required": false,
            "in": "query",
            "type": "string",
            "name": "format"
          }
        ],
        "tags": [
          "oauth2",
          "oidc"
        ],
        "description": "This endpoint allows applications to validate the access token issued by VMware Identity Manager, and to retrieve the public key used to sign the token.",
        "summary": "Retrieve the public key to validate a token or check the given access token",
        "operationId": "get-getTokenAttribute"
      }
    },
    "/SAAS/jersey/manager/api/scim/Groups/.search": {
      "post": {
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Resources"
            }
          },
          "400": {
            "description": "The specified search request is invalid"
          }
        },
        "description": "Retrieve all groups if no filter is specified, otherwise retrieve all the groups matching the given filter.\nThis endpoint complies with the SCIM specifications, see https://tools.ietf.org/html/rfc7644#page-15.\nThis serves the same function as the GET /scim/Groups API but using a POST method so that the length of the request is not limited.",
        "parameters": [
          {
            "description": "the search request",
            "required": true,
            "x-examples": {
              "default": "{\n\t\"filter\" : \"displayName co \\\"internal\\\"\",\n\t\"attributes\" : \"displayName\",\n\t\"sortBy\" : \"displayName\"\n}"
            },
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/SearchRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "scim",
          "admin"
        ],
        "summary": "Find all groups or only groups matching a supplied filter",
        "security": [
          {
            "oauth2": [
              "admin"
            ]
          }
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "post-findGroups"
      }
    },
    "/SAAS/auth/device/register": {
      "post": {
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            }
          },
          "302": {
            "description": "VMware Identity Manager will redirect to the specified redirect_uri. The redirect URL will contain 'error' and 'error_description' query parameters if there is an error: the response_type is invalid or missing, the specified scope is unknown. Otherwise the redirect URL will contain the state, the activation code and the authorization code to exchange respectively in the activation and authorization subsequent requests."
          },
          "400": {
            "description": "The error can be any of those: the app_product_id does not exist, the user_device is not specified or incorrect, the redirect_uri is not specified or invalid or does not match the one in the app_product_id."
          }
        },
        "parameters": [
          {
            "description": "Specifies the name of the template that was registered with VMware Identity Manager.",
            "required": true,
            "x-example": "VMware-AppAuth-Samples-Template",
            "in": "query",
            "type": "string",
            "name": "app_product_id"
          },
          {
            "description": "A JSON representation of a user's device. It contains device information.",
            "required": true,
            "x-example": "%7B%22osFamily%22%3A%22Android%22%2C%22extendedAttributeMap%22%3A%7B%22model%22%3A%22Android+SDK+built+for+x86%22%7D%2C%22machineName%22%3A%22unknown%22%2C%22osVersion%22%3A24%2C%22osName%22%3A%22Android%22%2C%22deviceId%22%3A%227ea00d46-35eb-4cd9-951a-4b790c14bb4f%22%7D",
            "in": "query",
            "type": "string",
            "name": "user_device"
          },
          {
            "description": "A unique identifier for the user's device.",
            "required": true,
            "x-example": "my+Android+123456",
            "in": "query",
            "type": "string",
            "name": "device_name"
          },
          {
            "description": "Must be 'code'.",
            "required": true,
            "x-example": "code",
            "in": "query",
            "type": "string",
            "name": "response_type"
          },
          {
            "description": "Specifies the callback endpoint in your application that will receive the authorization code. It must match the redirect_uri defined in the pre-created template in VMware Identity Manager. When sending the redirect_uri as a URL parameter it has to be URL encoded.",
            "required": true,
            "x-example": "com.vmware.idm.samples.mobilesso%3A%2F%2Foauth2redirect",
            "in": "query",
            "type": "string",
            "name": "redirect_uri"
          },
          {
            "description": "A random string that your application generates and that will be sent back as a parameter during the URI redirection.",
            "required": false,
            "x-example": "5aPY-C1JSeyTiUPWV_DLDw",
            "in": "query",
            "type": "string",
            "name": "state"
          },
          {
            "description": "The list of scopes of the authorization request separated by space and is URL encoded. The scopes must be equivalent or a subset of the scopes defined in the template.",
            "required": false,
            "x-example": "openid+profile+email+user",
            "in": "query",
            "type": "string",
            "name": "scope"
          }
        ],
        "tags": [
          "mobile",
          "oauth2",
          "login"
        ],
        "description": "This endpoint is the starting point of a mobile device dynamic client registration flow.",
        "summary": "Authenticate a user on a device by registering the user's device in the system.",
        "operationId": "post-doDeviceRegister"
      },
      "get": {
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            }
          },
          "302": {
            "description": "VMware Identity Manager will redirect to the specified redirect_uri. The redirect URL will contain 'error' and 'error_description' query parameters if there is an error: the response_type is invalid or missing, the specified scope is unknown. Otherwise the redirect URL will contain the state, the activation code and the authorization code to exchange respectively in the activation and authorization subsequent requests."
          },
          "400": {
            "description": "The error can be any of those: the app_product_id does not exist, the user_device is not specified or incorrect, the redirect_uri is not specified or invalid or does not match the one in the app_product_id."
          }
        },
        "parameters": [
          {
            "description": "Specifies the name of the template that was registered with VMware Identity Manager.",
            "required": true,
            "x-example": "VMware-AppAuth-Samples-Template",
            "in": "query",
            "type": "string",
            "name": "app_product_id"
          },
          {
            "description": "A JSON representation of a user's device. It contains device information.",
            "required": true,
            "x-example": "%7B%22osFamily%22%3A%22Android%22%2C%22extendedAttributeMap%22%3A%7B%22model%22%3A%22Android+SDK+built+for+x86%22%7D%2C%22machineName%22%3A%22unknown%22%2C%22osVersion%22%3A24%2C%22osName%22%3A%22Android%22%2C%22deviceId%22%3A%227ea00d46-35eb-4cd9-951a-4b790c14bb4f%22%7D",
            "in": "query",
            "type": "string",
            "name": "user_device"
          },
          {
            "description": "A unique identifier for the user's device.",
            "required": true,
            "x-example": "my+Android+123456",
            "in": "query",
            "type": "string",
            "name": "device_name"
          },
          {
            "description": "Must be 'code'.",
            "required": true,
            "x-example": "code",
            "in": "query",
            "type": "string",
            "name": "response_type"
          },
          {
            "description": "Specifies the callback endpoint in your application that will receive the authorization code. It must match the redirect_uri defined in the pre-created template in VMware Identity Manager. When sending the redirect_uri as a URL parameter it has to be URL encoded.",
            "required": true,
            "x-example": "com.vmware.idm.samples.mobilesso%3A%2F%2Foauth2redirect",
            "in": "query",
            "type": "string",
            "name": "redirect_uri"
          },
          {
            "description": "A random string that your application generates and that will be sent back as a parameter during the URI redirection.",
            "required": false,
            "x-example": "5aPY-C1JSeyTiUPWV_DLDw",
            "in": "query",
            "type": "string",
            "name": "state"
          },
          {
            "description": "The list of scopes of the authorization request separated by space and is URL encoded. The scopes must be equivalent or a subset of the scopes defined in the template.",
            "required": false,
            "x-example": "openid+profile+email+user",
            "in": "query",
            "type": "string",
            "name": "scope"
          }
        ],
        "tags": [
          "mobile",
          "oauth2",
          "login"
        ],
        "description": "This endpoint is the starting point of a mobile device dynamic client registration flow.",
        "summary": "Authenticate a user on a device by registering the user's device in the system.",
        "operationId": "get-doDeviceRegister"
      }
    },

    "/SAAS/jersey/manager/api/scim/Me": {
      "get": {
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SdkUserResource"
            }
          },
          "400": {
            "description": "The specified \"attributes\" parameter is invalid"
          }
        },
        "description": "Display the information for the user associated with the provided access token. The user's attributes can be filtered using the 'attributes' parameter.",
        "parameters": [
          {
            "description": "list of attributes to return, separated by comma. When specified, the retrieved user will only contain the minimal set of user attributes plus the attributes or sub-attributes explicitly requested",
            "required": false,
            "x-example": "userName,groups",
            "in": "query",
            "type": "string",
            "name": "attributes"
          },
          {
            "description": "custom schema extension types for which user schema attributes need to be included",
            "required": false,
            "x-example": "myCustomSchema",
            "in": "query",
            "type": "string",
            "name": "customSchemaExtensionTypes"
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "scim",
          "user"
        ],
        "summary": "Provides information about the logged-in user.",
        "security": [
          {
            "oauth2": [
              "user"
            ]
          }
        ],
        "operationId": "get-getUserForAuthenticatedUser"
      }
    },
    "/SAAS/jersey/manager/api/scim/Roles": {
      "get": {
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResourcesOfRoleResource"
            }
          },
          "404": {
            "description": "If the query parameter values are invalid for \"count\" or \"startIndex\""
          },
          "500": {
            "description": "An unexpected error occurred"
          },
          "400": {
            "description": "The specified \"filter\" or \"attributes\" parameter values are invalid"
          }
        },
        "description": "The role id is a unique internal identifier and can be retrieved using the search API /scim/Roles?filter=",
        "parameters": [
          {
            "description": "list of attributes to return, separated by comma. When specified, the retrieved role(s)will only contain the minimal set of role attributes plus the attributes or sub-attributes explicitly requested, i.e. {urn}:{Attribute name}.{Sub-Attribute name}",
            "required": false,
            "x-example": "displayName,meta.version,urn:scim:schemas:extension:workspace:1.0:description,",
            "in": "query",
            "type": "string",
            "name": "attributes"
          },
          {
            "description": "when specified, only roles matching the filter expression will be returned. The filter must comply with the SCIM specification. Only 'eq','co','sw','gt','ge','lt' and 'le' are currently supported as operators",
            "required": false,
            "x-example": "displayName co \"User\"",
            "in": "query",
            "type": "string",
            "name": "filter"
          },
          {
            "description": "offset of the first role to return in the list of found roles",
            "format": "int32",
            "required": false,
            "x-example": 10,
            "in": "query",
            "type": "integer",
            "name": "startIndex"
          },
          {
            "description": "the number of found roles to return starting from the given startIndex",
            "format": "int32",
            "required": false,
            "x-example": 50,
            "in": "query",
            "type": "integer",
            "name": "count"
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "scim",
          "admin"
        ],
        "summary": "Find all roles or only roles matching a supplied filter",
        "security": [
          {
            "oauth2": [
              "admin"
            ]
          }
        ],
        "operationId": "get-getRoles"
      }
    },
    "/SAAS/jersey/manager/api/oauth2clients/{id}": {
      "put": {
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/OAuth2ClientTypeInfo"
            }
          },
          "404": {
            "description": "If oauth2client id is not found"
          },
          "500": {
            "description": "When changing the existing client ID is attempted or if an unexpected error occurred"
          },
          "400": {
            "description": "If the provided client information is malformed"
          }
        },
        "description": "This endpoint is used to update information of an existing client, using a client id. Renaming the client (update client id) is not supported; To rename a client, it needs to be deleted first and then re-created",
        "parameters": [
          {
            "description": "the id of the oauth2client to be updated",
            "required": true,
            "x-example": "auth_grant_oauthclient1",
            "in": "path",
            "type": "string",
            "name": "id"
          }
        ],
        "produces": [
          "application/vnd.vmware.horizon.manager.oauth2client+json"
        ],
        "tags": [
          "admin",
          "oauth2"
        ],
        "summary": "Update an existing OAuth 2.0 client",
        "security": [
          {
            "oauth2": [
              "admin"
            ]
          }
        ],
        "consumes": [
          "application/vnd.vmware.horizon.manager.oauth2client+json"
        ],
        "operationId": "put-updateOAuth2Client"
      },
      "delete": {
        "responses": {
          "404": {
            "description": "given client does not exist"
          },
          "204": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/OAuth2ClientTypeInfo"
            }
          }
        },
        "parameters": [
          {
            "description": "the id of the OAuth2 client to be deleted",
            "required": true,
            "x-example": "auth_grant_oauthclient1",
            "in": "path",
            "type": "string",
            "name": "id"
          }
        ],
        "tags": [
          "admin",
          "oauth2"
        ],
        "description": "This endpoint is used to delete an existing client. Once deleted, the client information, its associated suite tokens, activation tokens, authorization codes, access tokens and refresh tokens will be lost. The operation cannot be undone",
        "summary": "Delete an OAuth 2.0 client",
        "security": [
          {
            "oauth2": [
              "admin"
            ]
          }
        ],
        "operationId": "delete-deleteOAuth2Client"
      },
      "get": {
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/OAuth2ClientTypeInfo"
            }
          },
          "404": {
            "description": "If the OAuth2 client id is null or not found"
          }
        },
        "description": "This endpoint is used to get full details of a registered OAuth 2.0 Client on VMware Identity Manager",
        "parameters": [
          {
            "description": "the id of the oauth2client to retrieve",
            "required": true,
            "x-example": "auth_grant_oauthclient1",
            "in": "path",
            "type": "string",
            "name": "id"
          }
        ],
        "produces": [
          "application/vnd.vmware.horizon.manager.oauth2client+json",
          "application/vnd.vmware.horizon.manager.clientcredentialsoauth2client+json",
          "application/vnd.vmware.horizon.manager.classicoauth2client+json"
        ],
        "tags": [
          "admin",
          "oauth2"
        ],
        "summary": "View an existing OAuth 2.0 client",
        "security": [
          {
            "oauth2": [
              "admin"
            ]
          }
        ],
        "operationId": "get-getOAuth2Client"
      }
    },
    "/SAAS/jersey/manager/api/scim/Groups": {
      "post": {
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SdkGroupResource"
            }
          },
          "409": {
            "description": "A group with the same displayName already exists"
          },
          "400": {
            "description": "The specified attributes are invalid or the displayName of the group to be created is missing or invalid"
          }
        },
        "description": "Creates a group in the system directory",
        "parameters": [
          {
            "description": "list of attributes to return, separated by comma. When specified, the returned created group will only contain the minimal set of group attributes plus the attributes or sub-attributes explicitly requested",
            "required": false,
            "x-example": "urn:scim:schemas:extension:workspace:1.0:domain,groupName",
            "in": "query",
            "type": "string",
            "name": "attributes"
          },
          {
            "description": "the group resource to be created as a JSON string",
            "required": true,
            "x-examples": {
              "default": "{\n\t\"schemas\": [ \"urn:scim:schemas:core:1.0\" ], \n\t\"displayName\": \"test-group\"\n}"
            },
            "name": "body",
            "in": "body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "scim",
          "admin"
        ],
        "summary": "Create a local group",
        "security": [
          {
            "oauth2": [
              "admin"
            ]
          }
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "post-postGroup"
      },
      "get": {
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResourcesOfGroupResource"
            }
          },
          "404": {
            "description": "If the query parameter values are invalid for \"count\" or \"startIndex\""
          },
          "400": {
            "description": "The specified filter operation is invalid or the specified \"attributes\" are invalid or the \"sortBy\" parameter is invalid"
          }
        },
        "description": "Retrieve all groups if no filter is specified, otherwise retrieve all the groups matching the given filter.\nThis endpoint complies with the SCIM specifications; see https://tools.ietf.org/html/rfc7644#page-15",
        "parameters": [
          {
            "description": "list of attributes to return, separated by comma. When specified, the retrieved group(s) will only contain the minimal set of group attributes plus the attributes or sub-attributes explicitly requested",
            "required": false,
            "x-example": "displayName,urn:scim:schemas:extension:workspace:1.0:email",
            "in": "query",
            "type": "string",
            "name": "attributes"
          },
          {
            "description": "when specified, only users matching the filter expression will be returned. The filter must comply with the SCIM specification. Only 'eq','co','sw','gt','ge','lt' and 'le' are currently supported as operators",
            "required": false,
            "x-example": "displayName co \"test\"",
            "in": "query",
            "type": "string",
            "name": "filter"
          },
          {
            "description": "offset of the first group to return in the list of found groups",
            "format": "int32",
            "required": false,
            "x-example": 10,
            "in": "query",
            "type": "integer",
            "name": "startIndex"
          },
          {
            "description": "the number of found groups to return starting from the given startIndex",
            "format": "int32",
            "required": false,
            "x-example": 50,
            "in": "query",
            "type": "integer",
            "name": "count"
          },
          {
            "description": "the attribute to use to sort the found group",
            "required": false,
            "x-example": "displayName",
            "in": "query",
            "type": "string",
            "name": "sortBy"
          },
          {
            "enum": [
              "ascending",
              "descending"
            ],
            "description": "the direction the resources returned should be sorted in. Allowed values are \"ascending\" and \"descending\"",
            "required": false,
            "in": "query",
            "type": "string",
            "name": "sortOrder"
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "scim",
          "admin"
        ],
        "summary": "Find all groups or only groups matching a supplied filter",
        "security": [
          {
            "oauth2": [
              "admin"
            ]
          }
        ],
        "operationId": "get-getGroups"
      }
    }
  },
  "schemes": [
    "https"
  ],
  "tags": [
    {
      "name": "admin"
    },
    {
      "name": "oauth2"
    },
    {
      "name": "scim"
    },
    {
      "name": "user"
    }
  ],
  "basePath": "/",
  "securityDefinitions": {
    "oauth2": {
      "scopes": {
        "admin": "The admin role",
        "user": "The user role"
      },
      "tokenUrl": "/SAAS/auth/oauthtoken",
      "description": "The OAuth2.0 authentication scheme to access all APIs. VMware Identity Manager supports 'Authorization Code', 'Resource Owner Password Credentials' and 'Client Credentials' as defined by the OAuth 2.0 spec.",
      "flow": "accessCode",
      "type": "oauth2",
      "authorizationUrl": "/SAAS/auth/oauth2/authorize"
    },
    "basic_auth": {
      "type": "basic",
      "description": "The HTTP Basic authentication scheme. The 'Authorization' header is formed using 'Basic ' + base64Encode(client_id + ':' + client_secret)"
    }
  },
  "host": "localhost:8080",
  "definitions": {
    "OAuth2ClientTypeInfo": {
      "required": [
        "authGrantTypes",
        "clientId",
        "scope"
      ],
      "type": "object",
      "properties": {
        "accessTokenTTL": {
          "description": "How long in minutes new access tokens issued to this client should live",
          "type": "integer",
          "example": 10080,
          "format": "int32"
        },
        "tokenType": {
          "enum": [
            "Bearer"
          ],
          "type": "string",
          "example": "Bearer",
          "description": "type of the tokens that can be requested"
        },
        "strData": {
          "type": "string",
          "example": "1.1.1.1:8080",
          "description": "General purpose data bucket for storing additional data for a client, such as agent ip and port"
        },
        "rememberAs": {
          "type": "string",
          "example": "my application client credentials oauth2 client",
          "description": "A friendly name this native app/device is remembered as. Set by the admin"
        },
        "tokenLength": {
          "description": "The length of the refresh token to be returned in bytes (only applicable if authGrantTypes includes \"refresh_token\"). Currently the refresh token length is constant and this value is ignored.",
          "type": "integer",
          "example": 32,
          "format": "int32"
        },
        "clientId": {
          "type": "string",
          "example": "my-auth-grant-client1",
          "description": "The OAuth 2.0 Client identifier that the client uses to identify itself during the OAuth2 exchanges. The client ID must contain only alphanumeric (A-Z, a-z, 0-9), period (.), underscore (_), hyphen (-) and at sign (@) characters"
        },
        "refreshTokenTTL": {
          "description": " How long in minutes new refresh tokens issued to this client should live (only applicable if authGrantTypes includes \"refresh_token\")",
          "type": "integer",
          "example": 525600,
          "format": "int32"
        },
        "internalSystemClient": {
          "default": false,
          "type": "boolean",
          "example": false,
          "description": "When set to true, OAuth2 Client will become undeletable from the VMware Identity Admin UI. Default is 'false'"
        },
        "secret": {
          "type": "string",
          "example": "my-auth-grant-client1-secret",
          "description": "The OAuth 2.0 Client secret (a string provided by an admin or a VMware Identity Manager auto-generated string). If secret string not provided, an auto-generated secret will be returned. Secret field is mandatory in Authorization Code and Client Credentials Grant flows. If the secret field is omitted or left blank in Resource Owner grant flow, no secret will be required to authenticate the client"
        },
        "displayUserGrant": {
          "default": false,
          "type": "boolean",
          "example": false,
          "description": "Indicates whether to display grant page to user or not. If the value is set to false, then access is granted to clients according to org policy without asking user. Default is 'true'"
        },
        "_links": {
          "additionalProperties": {
            "$ref": "#/definitions/Link"
          },
          "readOnly": true,
          "type": "object"
        },
        "inheritanceAllowed": {
          "default": false,
          "type": "boolean",
          "example": true,
          "description": "If set to 'true' will allow the child tenants to look up clientId and secret at the root level. Default is 'false'"
        },
        "scope": {
          "type": "string",
          "example": "admin user openid profile email",
          "description": "list of space-delimited access request scopes that are allowed by this OAuth 2.0 Client. Available scope options are: admin- Admin Level Access, user - User Level Access, profile - Access to User's profile (FirstName//LastName//Display Name//Image), email - Access to User's Email, uuid  - Access for a specific application/resource which matches this UUID"
        },
        "activationToken": {
          "type": "string",
          "example": "eyJvdGEiOiIzOkhyYUwzQ2hTWGJKd3hzSnNCdkc2cjM0eDZDRng4blFkIiwidXJsIjoiaHR0cHM6Ly9ndy1hYS5ocy50cmNpbnQuY29tLyIsInRpZCI6Imd3LWFhIn0=",
          "description": "A one time token that can be used to securely activate an application with the client id and secret. Generating an activation token is currently not supported through this API"
        },
        "resourceUuid": {
          "description": "UUID of a VMware Identity application. Only users who are entitled to this application will be able to authenticate via this client.",
          "type": "string",
          "example": "9e70bee8-3a55-4413-8418-454e7278093e",
          "format": "uuid"
        },
        "authGrantTypes": {
          "type": "string",
          "example": "authorization_code client_credentials password",
          "description": "list of space-delimited Oauth 2.0 Access Grant Types that are enabled in this OAuth 2.0 Client. Available Grant types are: authorization_code client_credentials password"
        },
        "redirectUri": {
          "type": "string",
          "example": "https://*.hostname1.com/auth/* https://*.hostname2.com/auth/*",
          "description": "A space/comma separated list of absolute URIs of application endpoints that are allowed to receive the authorization code and access token. The redirect_uri sent by the application as part of the Authorization Code Grant Oauth 2.0 flow is verified against this list. A Wildcard can be substituted for any string to skip the check for a particular URL section"
        }
      },
      "description": "OAuth 2.0 Client Settings"
    },
    "OAuth2ClientSummaryList": {
      "type": "object",
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/OAuth2ClientSummary"
          },
          "type": "array",
          "description": "The list of items in the current page"
        },
        "_links": {
          "additionalProperties": {
            "$ref": "#/definitions/Link"
          },
          "readOnly": true,
          "type": "object"
        }
      },
      "description": "The list of OAuth 2.0 clients"
    },
    "OpenIDConfiguration": {
      "required": [
        "authorization_endpoint",
        "id_token_signing_alg_values_supported",
        "issuer",
        "jwks_uri",
        "response_types_supported",
        "subject_types_supported",
        "token_endpoint"
      ],
      "type": "object",
      "properties": {
        "userinfo_endpoint": {
          "type": "string",
          "example": "https://acme.vmwareidentity.com/SAAS/jersey/manager/api/userinfo",
          "description": "URL of the user info endpoint"
        },
        "jwks_uri": {
          "type": "string",
          "example": "https://acme.vmwareidentity.com/SAAS/API/1.0/REST/auth/token?attribute=publicKey&format=jwks",
          "description": "URL of JSON Web Key Set document"
        },
        "scopes_supported": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "list of the OAuth 2.0 scope values that VMware Identity Manager supports"
        },
        "subject_types_supported": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "list of the Subject Identifier types that VMware Identity Manager supports"
        },
        "token_endpoint": {
          "type": "string",
          "example": "https://acme.vmwareidentity.com/SAAS/auth/oauthtoken",
          "description": "URL of the OAuth 2.0 token endpoint"
        },
        "id_token_signing_alg_values_supported": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "list of the JWS signing algorithms supported for the ID Token to encode the Claims in a JWT"
        },
        "response_types_supported": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "list of the OAuth 2.0 response_type values that VMware Identity Manager supports"
        },
        "claims_supported": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "list of the claims VMware Identity Manager may be able to supply values for. Note that for privacy or other reasons, this might not be an exhaustive list"
        },
        "authorization_endpoint": {
          "type": "string",
          "example": "https://acme.vmwareidentity.com/SAAS/auth/oauth2/authorize",
          "description": "URL of the OAuth 2.0 authorization endpoint"
        },
        "issuer": {
          "type": "string",
          "example": "https://acme.vmwareidentity.com/SAAS/auth",
          "description": "the identifier of the token's issuer. This is identical to the 'iss' Claim value in ID Tokens"
        }
      },
      "description": "The OpenID configuration document as defined by the specification: http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata"
    },
    "AttributeDescriptor": {
      "type": "object",
      "properties": {
        "subAttributes": {
          "items": {
            "$ref": "#/definitions/AttributeDescriptor"
          },
          "type": "array"
        },
        "description": {
          "type": "string"
        },
        "canonicalValues": {
          "items": {
            "$ref": "#/definitions/EntryString"
          },
          "type": "array"
        },
        "dataType": {
          "enum": [
            "STRING",
            "BOOLEAN",
            "DATETIME",
            "DECIMAL",
            "INTEGER",
            "BINARY",
            "COMPLEX"
          ],
          "type": "string"
        },
        "required": {
          "type": "boolean"
        },
        "caseExact": {
          "type": "boolean"
        },
        "multiValuedChildName": {
          "type": "string"
        },
        "readOnly": {
          "type": "boolean"
        },
        "multiValued": {
          "type": "boolean"
        },
        "schema": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },

    "EntryString": {
      "type": "object",
      "properties": {
        "operation": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "primary": {
          "type": "boolean"
        },
        "value": {
          "type": "string"
        },
        "display": {
          "type": "string"
        }
      }
    },
        "SdkGroupResource": {
            "type": "object", 
            "properties": {
                "displayName": {
                    "type": "string"
                }, 
                "resourceDescriptor": {
                    "$ref": "#/definitions/ResourceDescriptor"
                }, 
                "urn:scim:schemas:extension:workspace:1.0": {
                    "description": "The group's attributes specific to the 'urn:scim:schemas:extension:workspace:1.0' schema.", 
                    "$ref": "#/definitions/WorkspaceSchemaGroupAttributes"
                }, 
                "scimObject": {
                    "$ref": "#/definitions/SCIMObject"
                }, 
                "meta": {
                    "$ref": "#/definitions/Meta"
                }, 
                "externalId": {
                    "type": "string"
                }, 
                "members": {
                    "items": {
                        "$ref": "#/definitions/EntryString"
                    }, 
                    "type": "array"
                }, 
                "id": {
                    "type": "string"
                }
            }, 
            "description": "The SCIM group resource object. It extends the standard SCIM group resource, see https://tools.ietf.org/html/rfc7643"
        }, 
    "Resources": {
      "type": "object",
      "properties": {
        "itemsPerPage": {
          "type": "integer",
          "format": "int32"
        },
        "startIndex": {
          "type": "integer",
          "format": "int64"
        },
        "totalResults": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ResourceDescriptor": {
      "type": "object",
      "properties": {
        "endpoint": {
          "type": "string"
        },
        "resourceDescriptor": {
          "$ref": "#/definitions/ResourceDescriptor"
        },
        "name": {
          "type": "string"
        },
        "attributeSchemas": {
          "uniqueItems": true,
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "description": {
          "type": "string"
        },
        "strictMode": {
          "type": "boolean"
        },
        "scimObject": {
          "$ref": "#/definitions/SCIMObject"
        },
        "meta": {
          "$ref": "#/definitions/Meta"
        },
        "externalId": {
          "type": "string"
        },
        "attributes": {
          "items": {
            "$ref": "#/definitions/AttributeDescriptor"
          },
          "type": "array"
        },
        "id": {
          "type": "string"
        },
        "schema": {
          "type": "string"
        }
      }
    },
    "ResourcesOfGroupResource": {
      "type": "object",
      "properties": {
        "itemsPerPage": {
          "type": "integer",
          "format": "int32"
        },
        "startIndex": {
          "type": "integer",
          "format": "int64"
        },
        "totalResults": {
          "type": "integer",
          "format": "int64"
        },
        "Resources": {
          "items": {
            "$ref": "#/definitions/SdkGroupResource"
          },
          "type": "array",
          "description": "The list of groups."
        }
      }
    },
    "Link": {
      "type": "object",
      "properties": {
        "href": {
          "type": "string",
          "format": "uri"
        },
        "params": {
          "$ref": "#/definitions/LinkParams"
        }
      }
    },
    "Address": {
      "type": "object",
      "properties": {
        "locality": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "formatted": {
          "type": "string"
        },
        "primary": {
          "type": "boolean"
        },
        "streetAddress": {
          "type": "string"
        },
        "postalCode": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
   "UserSummary": {
      "type": "object",
      "properties": {
        "displayName": {
          "type": "string",
          "description": "The display name of the user"
        },
        "name": {
          "description": "The user's name.",
          "$ref": "#/definitions/Name"
        },
        "designation": {
          "type": "string",
          "description": "The user's designation/job title."
        },
        "photo": {
          "type": "string",
          "description": "URL pointing to the image of the user"
        },
        "scimObject": {
          "$ref": "#/definitions/SCIMObject"
        },
        "meta": {
          "$ref": "#/definitions/Meta"
        },
        "externalId": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "resourceDescriptor": {
          "$ref": "#/definitions/ResourceDescriptor"
        }
      },
      "description": "The SCIM resource object that represents a summary description of a user instead of the full SCIM UserResource"
    },
    "SdkRoleResource": {
      "type": "object",
      "properties": {
        "displayName": {
          "type": "string",
          "example": "Administrator",
          "description": "The display name for this role"
        },
        "resourceDescriptor": {
          "$ref": "#/definitions/ResourceDescriptor"
        },
        "urn:scim:schemas:extension:workspace:1.0": {
          "description": "The role's attributes specific to the 'urn:scim:schemas:extension:workspace:1.0' schema.",
          "$ref": "#/definitions/WorkspaceSchemaUserAttributes"
        },
        "scimObject": {
          "$ref": "#/definitions/SCIMObject"
        },
        "meta": {
          "$ref": "#/definitions/Meta"
        },
        "externalId": {
          "type": "string"
        },
        "members": {
          "items": {
            "$ref": "#/definitions/EntryString"
          },
          "type": "array",
          "example": "[{\"value\": \"user1\",\"type\": \"User\"},{\"value\": \"user2\",\"type\": \"User\"}]",
          "description": "The set of users or groups that have been assigned to this role or null if none"
        },
        "id": {
          "type": "string"
        },
        "schemas": {
          "uniqueItems": true,
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "The set of schemas currently contributing attributes to this role"
        }
      },
      "description": "The SCIM Role resource object. Role resource is an extension to the \"roles\" attribute which is loosely defined in the SCIM Core Schema; see https://tools.ietf.org/html/rfc7643"
    },
    "Name": {
      "type": "object",
      "properties": {
        "honorificPrefix": {
          "type": "string"
        },
        "middleName": {
          "type": "string"
        },
        "familyName": {
          "type": "string"
        },
        "formatted": {
          "type": "string"
        },
        "givenName": {
          "type": "string"
        },
        "honorificSuffix": {
          "type": "string"
        }
      }
    },
    "OAuth2Token": {
      "type": "object",
      "properties": {
        "access_token": {
          "type": "string",
          "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9xxxxHVcA76zjsGN2w...",
          "description": "The requested access token. This token can now be used to call VMware Identity Manager APIs. For example, with the 'Bearer' token type, use 'Bearer &lt;this access token value&gt;' as the 'Authorization' header. The access token is a <a href=\"https://jwt.io/\">JSON web token</a> (JWT)."
        },
        "token_type": {
          "type": "string",
          "example": "Bearer",
          "description": "The access token type. It provides the client with the information required to successfully utilize the access token to make a protected resource request. For example, the 'Bearer' token type is utilized by simply including the access token string in the request: Authorization: Bearer mF_9.B5f-4.1JqM"
        },
        "expires_in": {
          "description": "The time (in seconds) this token expires. If the return value is positive, the access token is going to expire in that many seconds. If the return value is 0, the access token already expired.If the return value is -1, token state could not be determined, since the access token doesn't contain expiration value.",
          "type": "integer",
          "example": 21599,
          "format": "int64"
        },
        "refresh_token": {
          "type": "string",
          "example": "21599",
          "description": "The refresh token associated with the access token, if any. This refresh token can be used to request a refresh for the associated access token."
        },
        "scope": {
          "type": "string",
          "example": "admin openid",
          "description": "The scope of the access token issued. The value is expressed as a list of space-\n   delimited, case-sensitive strings."
        }
      },
      "description": "The OAuth 2.0 token object"
    },
    "OAuth2ClientSummary": {
      "type": "object",
      "properties": {
        "scope": {
          "type": "string",
          "example": "admin",
          "description": "The scope of this OAuth 2.0 client"
        },
        "rememberAs": {
          "type": "string",
          "example": "my oauth client",
          "description": "The human friendly name of this OAuth 2.0 client"
        },
        "_links": {
          "additionalProperties": {
            "$ref": "#/definitions/Link"
          },
          "readOnly": true,
          "type": "object"
        },
        "mediaType": {
          "type": "string",
          "example": "application/vnd.vmware.horizon.manager.clientcredentialsoauth2client+json",
          "description": "Defines the media type of this OAuth 2.0 client (Client Credentials type or Classic type)"
        },
        "clientId": {
          "type": "string",
          "example": "oauth_clientid",
          "description": "The client identifier of this OAuth 2.0 client"
        }
      },
      "description": "An OAuth 2.0 client object"
    },
    "SdkUserResource": {
      "type": "object",
      "properties": {
        "phoneNumbers": {
          "items": {
            "$ref": "#/definitions/EntryString"
          },
          "type": "array"
        },
        "addresses": {
          "items": {
            "$ref": "#/definitions/Address"
          },
          "type": "array"
        },
        "locale": {
          "type": "string"
        },
        "userType": {
          "type": "string"
        },
        "meta": {
          "$ref": "#/definitions/Meta"
        },
        "id": {
          "type": "string"
        },
        "resourceDescriptor": {
          "$ref": "#/definitions/ResourceDescriptor"
        },
        "title": {
          "type": "string"
        },
        "preferredLanguage": {
          "type": "string"
        },
        "scimObject": {
          "$ref": "#/definitions/SCIMObject"
        },
        "ims": {
          "items": {
            "$ref": "#/definitions/EntryString"
          },
          "type": "array"
        },
        "externalId": {
          "type": "string"
        },
        "entitlements": {
          "items": {
            "$ref": "#/definitions/EntryString"
          },
          "type": "array"
        },
        "nickName": {
          "type": "string"
        },
        "urn:scim:schemas:extension:workspace:1.0": {
          "description": "The user's attributes specific to the 'urn:scim:schemas:extension:workspace:1.0' schema.",
          "$ref": "#/definitions/WorkspaceSchemaUserAttributes"
        },
        "photos": {
          "items": {
            "$ref": "#/definitions/EntryString"
          },
          "type": "array"
        },
        "groups": {
          "items": {
            "$ref": "#/definitions/EntryString"
          },
          "type": "array"
        },
        "active": {
          "type": "boolean"
        },
        "password": {
          "type": "string"
        },
        "emails": {
          "items": {
            "$ref": "#/definitions/EntryString"
          },
          "type": "array"
        },
        "userName": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "name": {
          "$ref": "#/definitions/Name"
        },
        "roles": {
          "items": {
            "$ref": "#/definitions/EntryString"
          },
          "type": "array"
        },
        "urn:scim:schemas:extension:enterprise:1.0": {
          "description": "The user's attributes specific to the 'urn:scim:schemas:extension:enterprise:1.0' schema.",
          "$ref": "#/definitions/EnterpriseSchemaUserAttributes"
        },
        "profileUrl": {
          "type": "string"
        },
        "timeZone": {
          "type": "string"
        }
      },
      "description": "The SCIM user resource object. It extends the standard SCIM user resource, see https://tools.ietf.org/html/rfc7643"
    },
    "ResourcesOfRoleResource": {
      "type": "object",
      "properties": {
        "itemsPerPage": {
          "type": "integer",
          "format": "int32"
        },
        "startIndex": {
          "type": "integer",
          "format": "int64"
        },
        "totalResults": {
          "type": "integer",
          "format": "int64"
        },
        "Resources": {
          "items": {
            "$ref": "#/definitions/SdkRoleResource"
          },
          "type": "array",
          "description": "The list of roles."
        }
      }
    },
    "Entry": {
      "type": "object",
      "properties": {
        "operation": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "primary": {
          "type": "boolean"
        },
        "value": {
          "type": "object"
        },
        "display": {
          "type": "string"
        }
      }
    },
    "ResourcesOfUserResource": {
      "type": "object",
      "properties": {
        "itemsPerPage": {
          "type": "integer",
          "format": "int32"
        },
        "startIndex": {
          "type": "integer",
          "format": "int64"
        },
        "totalResults": {
          "type": "integer",
          "format": "int64"
        },
        "Resources": {
          "items": {
            "$ref": "#/definitions/SdkUserResource"
          },
          "type": "array",
          "description": "The list of users."
        }
      }
    },
    "WorkspaceSchemaUserAttributes": {
      "type": "object",
      "properties": {
        "distinguishedName": {
          "type": "string",
          "example": "CN=user1,CN=Users,DC=acme,DC=com",
          "description": "The user distinguished name if available"
        },
        "domain": {
          "type": "string",
          "example": "acme.com",
          "description": "The user domain: can be the domain coming from an external source as AD or a local domain like 'System Domain'"
        },
        "internalUserType": {
          "type": "string",
          "example": "PROVISIONED",
          "description": "The user internal type. Possible values are: PROVISIONED, LOCAL, OPERATOR, SERVICE and JIT "
        },
        "softDeleted": {
          "type": "boolean",
          "description": "Is set to true if user is soft deleted. False or empty if user is not soft deleted"
        },
        "userStatus": {
          "type": "string",
          "example": "1",
          "description": "The user status, available values are: 1 for enabled, 2 for disabled and 3 for deleted user"
        },
        "userPrincipalName": {
          "type": "string",
          "example": "user1@acme.com",
          "description": "The user principal name if available"
        },
        "userStoreUuid": {
          "type": "string",
          "example": "19175b6d-a656-451a-9d25-b62e12d90a24",
          "description": "The user store identifier"
        },
        "firstLoginUrl": {
          "type": "string",
          "description": "The URL to setup the user's password after the initial creation. Only available after creating the user and if the password was not set"
        }
      }
    },
    "SearchRequest": {
      "type": "object",
      "properties": {
        "customSchemaExtensionTypes": {
          "type": "string"
        },
        "count": {
          "description": "The number of found resources to return starting from the given startIndex. This is used for pagination. Default is 20",
          "type": "integer",
          "example": 50,
          "format": "int32"
        },
        "excludedAttributes": {
          "type": "string"
        },
        "filter": {
          "type": "string",
          "example": "domain co \"test.com\"",
          "description": "The search filter. When specified, only resources matching the filter expression will be returned. The filter must comply with the SCIM specification. Only 'eq','co','sw','gt','ge','lt' and 'le' are currently supported as operators"
        },
        "startIndex": {
          "description": "Offset of the first resource to return in the list of found resources. This is used for pagination. Default is 0",
          "type": "integer",
          "example": 1,
          "format": "int32"
        },
        "sortOrder": {
          "type": "string",
          "example": "descending",
          "description": "The direction the resources returned should be sorted in. Allowed values are \"ascending\" and \"descending\""
        },
        "attributes": {
          "type": "string",
          "example": "distinguishedName",
          "description": "The attributes to be returned. When specified, the returned resource will contain the minimal set of resource attributes plus the attributes or sub-attributes explicitly requested. "
        },
        "sortBy": {
          "type": "string",
          "example": "distinguishedName",
          "description": "The attribute to use to sort the found resource"
        }
      },
      "description": "The SCIM search request object. To be used in requests via POST HTTP method"
    },
    "SCIMObject": {
      "type": "object",
      "properties": {
        "schemas": {
          "uniqueItems": true,
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      }
    },
    "LinkParams": {
      "type": "object"
    },
    "Manager": {
      "type": "object",
      "properties": {
        "displayName": {
          "type": "string"
        },
        "managerId": {
          "type": "string"
        }
      }
    },
    "Meta": {
      "type": "object",
      "properties": {
        "lastModified": {
          "type": "string",
          "format": "date-time"
        },
        "version": {
          "type": "string"
        },
        "location": {
          "type": "string",
          "format": "uri"
        },
        "created": {
          "type": "string",
          "format": "date-time"
        }
      }
    },

    "OAuth2ClientActivationDetails": {
      "type": "object",
      "properties": {
        "client_secret": {
          "type": "string",
          "example": "KVk06Qre8WQLNpMJVcNHsX5d7vHCVFf0DkxR1sDcT90dCZv",
          "description": "The generated client secret"
        },
        "client_id": {
          "type": "string",
          "example": "MyAppTemplate@e9d80cec-4e12-4970-828d-ae4557e33174",
          "description": "The generated client identifier"
        }
      },
      "description": "The response of the mobile device activation"
    }, 
    "WorkspaceSchemaGroupAttributes": {
            "type": "object", 
            "properties": {
                "distinguishedName": {
                    "type": "string", 
                    "example": "CN=all-admin-users,CN=Users,DC=acme,DC=com", 
                    "description": "The group distinguished name if available"
                }, 
                "internalGroupType": {
                    "type": "string", 
                    "example": "EXTERNAL", 
                    "description": "The internal group type. Available values are: 'EXTERNAL' (when the group comes from an external source), DYNAMIC (local group with custom rules), INTERNAL (local group with static rules), ALL_USERS (the default group containing all users)"
                }, 
                "domain": {
                    "type": "string", 
                    "example": "acme.com", 
                    "description": "The group domain: can be the domain coming from an external source as AD or a local domain like 'System Domain'"
                }, 
                "description": {
                    "type": "string", 
                    "example": "The group for all admin users", 
                    "description": "The group description if available"
                }, 
                "compositionRules": {
                    "type": "string", 
                    "example": "{\n  \"addedUserIds\" : [ ],\n  \"excludedUserIds\" : [ ],\n  \"rule\" : {\n    \"type\" : \"internalGroup\",\n    \"groupId\" : \"53cc45f9-2e21-4fa4-ae81-32e6fb15bd91\"\n  }\n}", 
                    "description": "The group composition rules version 1. Those rules are populated with relevant information when a dynamic group is created."
                }, 
                "userStoreUuid": {
                    "type": "string", 
                    "example": "acme.com", 
                    "description": "The group user store identifier (userStoreUuid) if available. This is deprecated and will be replaced soon by the directory identifier"
                }, 
                "parents": {
                    "type": "string", 
                    "description": "The list of group parents if available. The groups can be nested and VMware Identity Manager will return the full hierarchy"
                }, 
                "compositionRulesV2": {
                    "type": "boolean", 
                    "example": false, 
                    "description": "The group composition rules version 2. Those rules are populated with relevant information when a dynamic group is created.It adds support for user uuid and group uuid"
                }, 
                "email": {
                    "type": "string", 
                    "example": "all-admin-users@acme.com", 
                    "description": "The group email if available"
                }
            }
        },
    "EnterpriseSchemaUserAttributes": {
      "type": "object",
      "properties": {
        "manager": {
          "description": "The user's manager if available. A complex type that optionally allows service\n      providers to represent organizational hierarchy by referencing the\n      \"id\" attribute of another User",
          "$ref": "#/definitions/Manager"
        },
        "employeeNumber": {
          "type": "string",
          "example": "100007",
          "description": "The user employee number if available: a string identifier, typically numeric or alphanumeric, assigned\n      to a person, typically based on order of hire or association with\n      an organization."
        }
      }
    }
  }, 
  "swagger": "2.0"
}
